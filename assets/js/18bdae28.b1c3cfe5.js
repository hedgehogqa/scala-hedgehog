"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[874],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var r=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),g=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=g(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=g(n),c=i,m=u["".concat(l,".").concat(c)]||u[c]||d[c]||a;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var g=2;g<a;g++)o[g]=n[g];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4273:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>g});var r=n(8168),i=(n(6540),n(5680));const a={title:"Integration with MUnit",sidebar_position:2,sidebar_label:"MUnit",slug:"/integration-munit"},o=void 0,s={unversionedId:"integration/munit",id:"integration/munit",title:"Integration with MUnit",description:"MUnit",source:"@site/../generated-docs/target/mdoc/integration/munit.md",sourceDirName:"integration",slug:"/integration-munit",permalink:"/scala-hedgehog/docs/integration-munit",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Integration with MUnit",sidebar_position:2,sidebar_label:"MUnit",slug:"/integration-munit"},sidebar:"tutorialSidebar",previous:{title:"Minitest",permalink:"/scala-hedgehog/docs/integration-minitest"}},l={},g=[{value:"MUnit",id:"munit",level:2}],p={toc:g},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.yg)(u,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"munit"},"MUnit"),(0,i.yg)("p",null,"Scala Hedgehog provides an integration module for ",(0,i.yg)("a",{parentName:"p",href:"https://scalameta.org/munit/"},"munit"),". This allows you to define property-based and example-based Hedgehog tests within a munit test suite. If you use this integration, you won't need to Scala Hedgehog sbt testing extension, because you're using the one provided by munit:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'val hedgehogVersion = "0.10.1"\nlibraryDependencies += "qa.hedgehog" %% "hedgehog-munit" % hedgehogVersion % Test\n')),(0,i.yg)("admonition",{title:"NOTE",type:"info"},(0,i.yg)("p",{parentName:"admonition"},"If you're using sbt version ",(0,i.yg)("inlineCode",{parentName:"p"},"1.9.0")," or ",(0,i.yg)("strong",{parentName:"p"},"lower"),", you need to add the following line to your ",(0,i.yg)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,i.yg)("pre",{parentName:"admonition"},(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'testFrameworks += TestFramework("hedgehog.sbt.Framework")\n'))),(0,i.yg)("admonition",{title:"NOTE",type:"info"},(0,i.yg)("p",{parentName:"admonition"},"For sbt version ",(0,i.yg)("inlineCode",{parentName:"p"},"1.9.1")," or ",(0,i.yg)("strong",{parentName:"p"},"higher"),", this step is not necessary, as ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/sbt/sbt/pull/7287"},"Hedgehog is supported by default"),".")),(0,i.yg)("p",null,"Here's an example of using ",(0,i.yg)("inlineCode",{parentName:"p"},"hedgehog-munit"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import hedgehog.munit.HedgehogSuite\nimport hedgehog._\n\nclass ReverseSuite extends HedgehogSuite {\n  property("reverse alphabetic strings") {\n    for {\n      xs <- Gen.alpha.list(Range.linear(0, 100)).forAll\n    } yield assertEquals(xs.reverse.reverse, xs)\n  }\n  \n  test("reverse hello") {\n    withMunitAssertions{ assertions =>\n      assertions.assertEquals("hello".reverse, "olleh")\n    }\n    "hello".reverse ==== "olleh"\n  }\n}\n')),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"HedgehogSuite")," provides ",(0,i.yg)("inlineCode",{parentName:"p"},"munit"),"-like assertions, along with all the ",(0,i.yg)("inlineCode",{parentName:"p"},"hedgehog.Result")," methods and members, that return results in the standard hedgehog report format while satisfying munit's exception-based test failures."))}d.isMDXComponent=!0}}]);