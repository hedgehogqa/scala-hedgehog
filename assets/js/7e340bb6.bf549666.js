"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[720],{5680:(e,a,n)=>{n.d(a,{xA:()=>c,yg:()=>m});var r=n(6540);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var g=r.createContext({}),s=function(e){var a=r.useContext(g),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=s(e.components);return r.createElement(g.Provider,{value:a},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},y=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,i=e.originalType,g=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(n),y=t,m=p["".concat(g,".").concat(y)]||p[y]||d[y]||i;return n?r.createElement(m,l(l({ref:a},c),{},{components:n})):r.createElement(m,l({ref:a},c))}));function m(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=n.length,l=new Array(i);l[0]=y;var o={};for(var g in a)hasOwnProperty.call(a,g)&&(o[g]=a[g]);o.originalType=e,o[p]="string"==typeof e?e:t,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},3281:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>g,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=n(8168),t=(n(6540),n(5680));const i={title:"Migration From ScalaCheck",sidebar_position:4,sidebar_label:"Migration From ScalaCheck",slug:"/guides-migration-from-scalacheck"},l=void 0,o={unversionedId:"guides/migration-scalacheck",id:"guides/migration-scalacheck",title:"Migration From ScalaCheck",description:"Migration From ScalaCheck",source:"@site/../generated-docs/target/mdoc/guides/migration-scalacheck.md",sourceDirName:"guides",slug:"/guides-migration-from-scalacheck",permalink:"/scala-hedgehog/docs/guides-migration-from-scalacheck",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Migration From ScalaCheck",sidebar_position:4,sidebar_label:"Migration From ScalaCheck",slug:"/guides-migration-from-scalacheck"},sidebar:"tutorialSidebar",previous:{title:"State-Based Testing (2)",permalink:"/scala-hedgehog/docs/guides-state-tutorial-vars"},next:{title:"Differences to Haskell Hedgehog",permalink:"/scala-hedgehog/docs/guides-haskell-differences"}},g={},s=[{value:"Migration From ScalaCheck",id:"migration-from-scalacheck",level:2},{value:"Properties",id:"properties",level:2},{value:"ScalaCheck",id:"scalacheck",level:3},{value:"Hedgehog",id:"hedgehog",level:3},{value:"Gen",id:"gen",level:2},{value:"ScalaCheck",id:"scalacheck-1",level:3},{value:"Hedgehog",id:"hedgehog-1",level:3},{value:"Arbitrary",id:"arbitrary",level:2},{value:"ScalaCheck",id:"scalacheck-2",level:3},{value:"Shrink",id:"shrink",level:2},{value:"ScalaCheck",id:"scalacheck-3",level:3},{value:"Hedgehog",id:"hedgehog-2",level:3}],c={toc:s},p="wrapper";function d(e){let{components:a,...n}=e;return(0,t.yg)(p,(0,r.A)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h2",{id:"migration-from-scalacheck"},"Migration From ScalaCheck"),(0,t.yg)("p",null,"For many cases migrating from ScalaCheck to Hedgehog should be ",(0,t.yg)("em",{parentName:"p"},"fairly"),"\nstraight forward, as the general principals are quite similar, and the changes\nare largely syntactic."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#properties"},"Properties")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#arbitary"},"Arbitrary")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#gen"},"Gen"))),(0,t.yg)("h2",{id:"properties"},"Properties"),(0,t.yg)("p",null,"Some basic rules:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Replace ",(0,t.yg)("inlineCode",{parentName:"p"},'Properties("...")')," with just ",(0,t.yg)("inlineCode",{parentName:"p"},"Properties"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Replace ",(0,t.yg)("inlineCode",{parentName:"p"},"Prop.forAll")," with a call to ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/hedgehogqa/scala-hedgehog/search?q=%22def+forAll%22&unscoped_q=%22def+forAll%22"},"forAll")," on a specific ",(0,t.yg)("inlineCode",{parentName:"p"},"Gen")," instance"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"If you have previously been relying on ",(0,t.yg)("inlineCode",{parentName:"p"},"Arbitrary")," instances these ",(0,t.yg)("em",{parentName:"p"},"have"),"\nto be replaced with calls to functions that return an instance of ",(0,t.yg)("inlineCode",{parentName:"p"},"Gen"),"."),(0,t.yg)("p",{parentName:"li"},"See the ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/hedgehogqa/scala-hedgehog/tree/master/core/src/main/scala/hedgehog/extra"},"extra")," package for some stand Scala data type combinators."),(0,t.yg)("p",{parentName:"li"},"For more information see the section on ",(0,t.yg)("a",{parentName:"p",href:"#gen"},"Gen"),".")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"p"},"flatMap")," over the result of your ",(0,t.yg)("inlineCode",{parentName:"p"},"genFoo.forAll"),", or use a ",(0,t.yg)("inlineCode",{parentName:"p"},"for"),"\ncomprehension.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Return your ",(0,t.yg)("inlineCode",{parentName:"p"},"Prop")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"Boolean")," assetions with ",(0,t.yg)("inlineCode",{parentName:"p"},"Result.assert(...)"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Replace ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/typelevel/scalacheck/search?q=%22def+label%22&unscoped_q=%22def+label%22"},"label")," or ",(0,t.yg)("inlineCode",{parentName:"p"},":|")," with  ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/hedgehogqa/scala-hedgehog/search?q=%22def+log%22&unscoped_q=%22def+log%22"},"Result.log(...)"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Replace equality assertions like ",(0,t.yg)("inlineCode",{parentName:"p"},"?=")," with ",(0,t.yg)("inlineCode",{parentName:"p"},"====")))),(0,t.yg)("h3",{id:"scalacheck"},"ScalaCheck"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import org.scalacheck._\n\nobject StringSpecification extends Properties("String") {\n\n  property("startsWith") =\n    Prop.forAll { (a: String, b: String) =>\n      (a+b).startsWith(a)\n    }\n}\n')),(0,t.yg)("h3",{id:"hedgehog"},"Hedgehog"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import hedgehog._\nimport hedgehog.runner._\n\nobject StringSpecification extends Properties {\n\n  override def tests: List[Test] = List(\n    property("startsWith", for {\n      a <- Gen.string(Gen.unicode, Range.linear(0, 100)).forAll\n      b <- Gen.string(Gen.unicode, Range.linear(0, 100)).forAll\n      } yield Result.assert((a+b).startsWith(a))\n    )\n  )\n}\n')),(0,t.yg)("h2",{id:"gen"},"Gen"),(0,t.yg)("p",null,"Some basic rules:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"Gen.list")," and ",(0,t.yg)("inlineCode",{parentName:"li"},"Gen.listOfN")," can be replaced with a call to\n",(0,t.yg)("inlineCode",{parentName:"li"},"list(Range.linear(0, n))")," on a specific ",(0,t.yg)("inlineCode",{parentName:"li"},"Gen")," instance."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"Gen.const")," is now ",(0,t.yg)("inlineCode",{parentName:"li"},"Gen.constant")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"Arbitrary.arbitrary[Int]")," is now ",(0,t.yg)("inlineCode",{parentName:"li"},"Gen.int(Range.linear(min, max))")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"Gen.oneOf")," is now ",(0,t.yg)("inlineCode",{parentName:"li"},"Gen.choice1"))),(0,t.yg)("p",null,'It\'s important to note that there are no more "default" ',(0,t.yg)("inlineCode",{parentName:"p"},"Arbitrary")," instances\nto summon. You ",(0,t.yg)("em",{parentName:"p"},"must")," decided what kind of ",(0,t.yg)("inlineCode",{parentName:"p"},"int")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"String")," you want to\ngenerate, and what their ",(0,t.yg)("inlineCode",{parentName:"p"},"Range")," is."),(0,t.yg)("h3",{id:"scalacheck-1"},"ScalaCheck"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"val genLeaf = Gen.const(Leaf)\n\nval genNode = for {\n  v <- arbitrary[Int]\n  left <- genTree\n  right <- genTree\n} yield Node(left, right, v)\n\ndef genTree: Gen[Tree] = Gen.oneOf(genLeaf, genNode)\n")),(0,t.yg)("h3",{id:"hedgehog-1"},"Hedgehog"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"val genLeaf = Gen.constant(Leaf)\n\nval genNode = for {\n  v <- Gen.int(Range.linear(Integer.MaxValue, Integer.MinValue))\n  left <- genTree\n  right <- genTree\n} yield Node(left, right, v)\n\ndef genTree: Gen[Tree] = Gen.choice1(genLeaf, genNode)\n")),(0,t.yg)("h2",{id:"arbitrary"},"Arbitrary"),(0,t.yg)("p",null,"Some basic rules:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Replace ",(0,t.yg)("inlineCode",{parentName:"li"},"implict def")," functions that return ",(0,t.yg)("inlineCode",{parentName:"li"},"Arbitrary")," to a function\nthat returns the ",(0,t.yg)("inlineCode",{parentName:"li"},"Gen")," directly.")),(0,t.yg)("h3",{id:"scalacheck-2"},"ScalaCheck"),(0,t.yg)("p",null,"This example was taken from the ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/typelevel/scalacheck/blob/main/doc/UserGuide.md#the-arbitrary-generator"},"ScalaCheck Guide"),"."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"implicit def arbTree[T](implicit a: Arbitrary[T]): Arbitrary[Tree[T]] = Arbitrary {\n\n  val genLeaf = for(e <- Arbitrary.arbitrary[T]) yield Leaf(e)\n\n  def genInternal(sz: Int): Gen[Tree[T]] = for {\n    n <- Gen.choose(sz/3, sz/2)\n    c <- Gen.listOfN(n, sizedTree(sz/2))\n  } yield Internal(c)\n\n  def sizedTree(sz: Int) =\n    if(sz <= 0) genLeaf\n    else Gen.frequency((1, genLeaf), (3, genInternal(sz)))\n\n  Gen.sized(sz => sizedTree(sz))\n}\n")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"def genTree[T](g: Gen[T]): Gen[Tree[T]] = {\n\n  val genLeaf = for(e <- g) yield Leaf(e)\n\n  def genInternal(sz: Size): Gen[Tree[T]] = for {\n    n <- Gen.choose(sz.value/3, sz.value/2)\n    c <- sizedTree(sz.value/2).list(Range.linear(0, n))\n  } yield Internal(c)\n\n  def sizedTree(sz: Size) =\n    if(sz.value <= 0) genLeaf\n    else Gen.frequency1((1, genLeaf), (3, genInternal(sz)))\n\n  Gen.sized(sz => sizedTree(sz))\n}\n")),(0,t.yg)("h2",{id:"shrink"},"Shrink"),(0,t.yg)("p",null,"This is assuming you're even writing them in the first place..."),(0,t.yg)("h3",{id:"scalacheck-3"},"ScalaCheck"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"case class Data(a: String, i: Int)\n\nimplicit def arbData: Arbitrary[Data] =\n  Arbitrary[Data] {\n    for {\n      s <- arbitrary[String]\n      i <- arbitrary[Int]\n    } yield Data(a, i)\n  }\n\nimplicit def shrink: Shrink[Data] =\n  Shrink[Data] { case Data(a, i) =>\n    shrink(a).map(a2 => Data(a2, i)) append\n    shrink(i).map(i2 => Data(a, i2))\n  }\n")),(0,t.yg)("h3",{id:"hedgehog-2"},"Hedgehog"),(0,t.yg)("p",null,"Good news, you don't need to do anything! Just write your generators."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"def genData: Gen[Data] =\n  for {\n    s <- Gen.string(Gen.unicode, Range.linear(0, 100))\n    i <- Gen.int(Range.linear(-100, 100))\n  } yield Data(a, i)\n")))}d.isMDXComponent=!0}}]);