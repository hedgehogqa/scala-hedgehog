"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[255],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>h});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),c=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},p=function(e){var a=c(e.components);return t.createElement(s.Provider,{value:a},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||g[m]||i;return n?t.createElement(h,l(l({ref:a},p),{},{components:n})):t.createElement(h,l({ref:a},p))}));function h(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9937:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=n(7462),r=(n(7294),n(3905));const i={title:"Migration From ScalaCheck",sidebar_position:4,sidebar_label:"Migration From ScalaCheck",slug:"/guides-migration-from-scalacheck"},l=void 0,o={unversionedId:"guides/migration-scalacheck",id:"guides/migration-scalacheck",title:"Migration From ScalaCheck",description:"Migration From ScalaCheck",source:"@site/../generated-docs/target/mdoc/guides/migration-scalacheck.md",sourceDirName:"guides",slug:"/guides-migration-from-scalacheck",permalink:"/scala-hedgehog/docs/guides-migration-from-scalacheck",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Migration From ScalaCheck",sidebar_position:4,sidebar_label:"Migration From ScalaCheck",slug:"/guides-migration-from-scalacheck"},sidebar:"tutorialSidebar",previous:{title:"State-Based Testing (2)",permalink:"/scala-hedgehog/docs/guides-state-tutorial-vars"},next:{title:"Differences to Haskell Hedgehog",permalink:"/scala-hedgehog/docs/guides-haskell-differences"}},s={},c=[{value:"Migration From ScalaCheck",id:"migration-from-scalacheck",level:2},{value:"Properties",id:"properties",level:2},{value:"ScalaCheck",id:"scalacheck",level:3},{value:"Hedgehog",id:"hedgehog",level:3},{value:"Gen",id:"gen",level:2},{value:"ScalaCheck",id:"scalacheck-1",level:3},{value:"Hedgehog",id:"hedgehog-1",level:3},{value:"Arbitrary",id:"arbitrary",level:2},{value:"ScalaCheck",id:"scalacheck-2",level:3},{value:"Shrink",id:"shrink",level:2},{value:"ScalaCheck",id:"scalacheck-3",level:3},{value:"Hedgehog",id:"hedgehog-2",level:3}],p={toc:c},d="wrapper";function g(e){let{components:a,...n}=e;return(0,r.kt)(d,(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"migration-from-scalacheck"},"Migration From ScalaCheck"),(0,r.kt)("p",null,"For many cases migrating from ScalaCheck to Hedgehog should be ",(0,r.kt)("em",{parentName:"p"},"fairly"),"\nstraight forward, as the general principals are quite similar, and the changes\nare largely syntactic."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#properties"},"Properties")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#arbitary"},"Arbitrary")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#gen"},"Gen"))),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("p",null,"Some basic rules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},'Properties("...")')," with just ",(0,r.kt)("inlineCode",{parentName:"p"},"Properties"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"Prop.forAll")," with a call to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hedgehogqa/scala-hedgehog/search?q=%22def+forAll%22&unscoped_q=%22def+forAll%22"},"forAll")," on a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"Gen")," instance"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you have previously been relying on ",(0,r.kt)("inlineCode",{parentName:"p"},"Arbitrary")," instances these ",(0,r.kt)("em",{parentName:"p"},"have"),"\nto be replaced with calls to functions that return an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"Gen"),"."),(0,r.kt)("p",{parentName:"li"},"See the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hedgehogqa/scala-hedgehog/tree/master/core/src/main/scala/hedgehog/extra"},"extra")," package for some stand Scala data type combinators."),(0,r.kt)("p",{parentName:"li"},"For more information see the section on ",(0,r.kt)("a",{parentName:"p",href:"#gen"},"Gen"),".")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"flatMap")," over the result of your ",(0,r.kt)("inlineCode",{parentName:"p"},"genFoo.forAll"),", or use a ",(0,r.kt)("inlineCode",{parentName:"p"},"for"),"\ncomprehension.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Return your ",(0,r.kt)("inlineCode",{parentName:"p"},"Prop")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Boolean")," assetions with ",(0,r.kt)("inlineCode",{parentName:"p"},"Result.assert(...)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Replace ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typelevel/scalacheck/search?q=%22def+label%22&unscoped_q=%22def+label%22"},"label")," or ",(0,r.kt)("inlineCode",{parentName:"p"},":|")," with  ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hedgehogqa/scala-hedgehog/search?q=%22def+log%22&unscoped_q=%22def+log%22"},"Result.log(...)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Replace equality assertions like ",(0,r.kt)("inlineCode",{parentName:"p"},"?=")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"====")))),(0,r.kt)("h3",{id:"scalacheck"},"ScalaCheck"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import org.scalacheck._\n\nobject StringSpecification extends Properties("String") {\n\n  property("startsWith") =\n    Prop.forAll { (a: String, b: String) =>\n      (a+b).startsWith(a)\n    }\n}\n')),(0,r.kt)("h3",{id:"hedgehog"},"Hedgehog"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import hedgehog._\nimport hedgehog.runner._\n\nobject StringSpecification extends Properties {\n\n  override def tests: List[Test] = List(\n    property("startsWith", for {\n      a <- Gen.string(Gen.unicode, Range.linear(0, 100)).forAll\n      b <- Gen.string(Gen.unicode, Range.linear(0, 100)).forAll\n      } yield Result.assert((a+b).startsWith(a))\n    )\n  )\n}\n')),(0,r.kt)("h2",{id:"gen"},"Gen"),(0,r.kt)("p",null,"Some basic rules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Gen.list")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Gen.listOfN")," can be replaced with a call to\n",(0,r.kt)("inlineCode",{parentName:"li"},"list(Range.linear(0, n))")," on a specific ",(0,r.kt)("inlineCode",{parentName:"li"},"Gen")," instance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Gen.const")," is now ",(0,r.kt)("inlineCode",{parentName:"li"},"Gen.constant")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Arbitrary.arbitrary[Int]")," is now ",(0,r.kt)("inlineCode",{parentName:"li"},"Gen.int(Range.linear(min, max))")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Gen.oneOf")," is now ",(0,r.kt)("inlineCode",{parentName:"li"},"Gen.choice1"))),(0,r.kt)("p",null,'It\'s important to note that there are no more "default" ',(0,r.kt)("inlineCode",{parentName:"p"},"Arbitrary")," instances\nto summon. You ",(0,r.kt)("em",{parentName:"p"},"must")," decided what kind of ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," you want to\ngenerate, and what their ",(0,r.kt)("inlineCode",{parentName:"p"},"Range")," is."),(0,r.kt)("h3",{id:"scalacheck-1"},"ScalaCheck"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val genLeaf = Gen.const(Leaf)\n\nval genNode = for {\n  v <- arbitrary[Int]\n  left <- genTree\n  right <- genTree\n} yield Node(left, right, v)\n\ndef genTree: Gen[Tree] = Gen.oneOf(genLeaf, genNode)\n")),(0,r.kt)("h3",{id:"hedgehog-1"},"Hedgehog"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val genLeaf = Gen.constant(Leaf)\n\nval genNode = for {\n  v <- Gen.int(Range.linear(Integer.MaxValue, Integer.MinValue))\n  left <- genTree\n  right <- genTree\n} yield Node(left, right, v)\n\ndef genTree: Gen[Tree] = Gen.choice1(genLeaf, genNode)\n")),(0,r.kt)("h2",{id:"arbitrary"},"Arbitrary"),(0,r.kt)("p",null,"Some basic rules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Replace ",(0,r.kt)("inlineCode",{parentName:"li"},"implict def")," functions that return ",(0,r.kt)("inlineCode",{parentName:"li"},"Arbitrary")," to a function\nthat returns the ",(0,r.kt)("inlineCode",{parentName:"li"},"Gen")," directly.")),(0,r.kt)("h3",{id:"scalacheck-2"},"ScalaCheck"),(0,r.kt)("p",null,"This example was taken from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typelevel/scalacheck/blob/main/doc/UserGuide.md#the-arbitrary-generator"},"ScalaCheck Guide"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"implicit def arbTree[T](implicit a: Arbitrary[T]): Arbitrary[Tree[T]] = Arbitrary {\n\n  val genLeaf = for(e <- Arbitrary.arbitrary[T]) yield Leaf(e)\n\n  def genInternal(sz: Int): Gen[Tree[T]] = for {\n    n <- Gen.choose(sz/3, sz/2)\n    c <- Gen.listOfN(n, sizedTree(sz/2))\n  } yield Internal(c)\n\n  def sizedTree(sz: Int) =\n    if(sz <= 0) genLeaf\n    else Gen.frequency((1, genLeaf), (3, genInternal(sz)))\n\n  Gen.sized(sz => sizedTree(sz))\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"def genTree[T](g: Gen[T]): Gen[Tree[T]] = {\n\n  val genLeaf = for(e <- g) yield Leaf(e)\n\n  def genInternal(sz: Size): Gen[Tree[T]] = for {\n    n <- Gen.choose(sz.value/3, sz.value/2)\n    c <- sizedTree(sz.value/2).list(Range.linear(0, n))\n  } yield Internal(c)\n\n  def sizedTree(sz: Size) =\n    if(sz.value <= 0) genLeaf\n    else Gen.frequency1((1, genLeaf), (3, genInternal(sz)))\n\n  Gen.sized(sz => sizedTree(sz))\n}\n")),(0,r.kt)("h2",{id:"shrink"},"Shrink"),(0,r.kt)("p",null,"This is assuming you're even writing them in the first place..."),(0,r.kt)("h3",{id:"scalacheck-3"},"ScalaCheck"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"case class Data(a: String, i: Int)\n\nimplicit def arbData: Arbitrary[Data] =\n  Arbitrary[Data] {\n    for {\n      s <- arbitrary[String]\n      i <- arbitrary[Int]\n    } yield Data(a, i)\n  }\n\nimplicit def shrink: Shrink[Data] =\n  Shrink[Data] { case Data(a, i) =>\n    shrink(a).map(a2 => Data(a2, i)) append\n    shrink(i).map(i2 => Data(a, i2))\n  }\n")),(0,r.kt)("h3",{id:"hedgehog-2"},"Hedgehog"),(0,r.kt)("p",null,"Good news, you don't need to do anything! Just write your generators."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"def genData: Gen[Data] =\n  for {\n    s <- Gen.string(Gen.unicode, Range.linear(0, 100))\n    i <- Gen.int(Range.linear(-100, 100))\n  } yield Data(a, i)\n")))}g.isMDXComponent=!0}}]);