"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[788],{9531:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=n(4848),s=n(8453);const o={title:"Integration with Minitest",sidebar_position:1,sidebar_label:"Minitest",slug:"/integration-minitest"},r=void 0,a={id:"integration/minitest",title:"Integration with Minitest",description:"Minitest",source:"@site/../generated-docs/target/mdoc/integration/minitest.md",sourceDirName:"integration",slug:"/integration-minitest",permalink:"/scala-hedgehog/docs/integration-minitest",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Integration with Minitest",sidebar_position:1,sidebar_label:"Minitest",slug:"/integration-minitest"},sidebar:"tutorialSidebar",previous:{title:"Integration with other test libraries",permalink:"/scala-hedgehog/docs/integration/"},next:{title:"MUnit",permalink:"/scala-hedgehog/docs/integration-munit"}},l={},d=[{value:"Minitest",id:"minitest",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"minitest",children:"Minitest"}),"\n",(0,i.jsxs)(t.p,{children:["Scala Hedgehog provides an integration module for ",(0,i.jsx)(t.a,{href:"https://github.com/monix/minitest",children:"minitest"}),". This allows you to define property-based and example-based Hedgehog tests within a minitest test suite. If you use this integration, you won't need to Scala Hedgehog sbt testing extension, because you're using the one provided by minitest:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'val hedgehogVersion = "0.10.1"\nlibraryDependencies += "qa.hedgehog" %% "hedgehog-minitest" % hedgehogVersion % Test\n'})}),"\n",(0,i.jsxs)(t.admonition,{title:"NOTE",type:"info",children:[(0,i.jsxs)(t.p,{children:["If you're using sbt version ",(0,i.jsx)(t.code,{children:"1.9.0"})," or ",(0,i.jsx)(t.strong,{children:"lower"}),", you need to add the following line to your ",(0,i.jsx)(t.code,{children:"build.sbt"})," file:"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'testFrameworks += TestFramework("hedgehog.sbt.Framework")\n'})})]}),"\n",(0,i.jsx)(t.admonition,{title:"NOTE",type:"info",children:(0,i.jsxs)(t.p,{children:["For sbt version ",(0,i.jsx)(t.code,{children:"1.9.1"})," or ",(0,i.jsx)(t.strong,{children:"higher"}),", this step is not necessary, as ",(0,i.jsx)(t.a,{href:"https://github.com/sbt/sbt/pull/7287",children:"Hedgehog is supported by default"}),"."]})}),"\n",(0,i.jsxs)(t.p,{children:["Here's an example of using ",(0,i.jsx)(t.code,{children:"hedgehog-minitest"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import minitest.SimpleTestSuite\nimport hedgehog.minitest.HedgehogSupport\nimport hedgehog._\n\nobject ReverseTest extends SimpleTestSuite with HedgehogSupport {\n  property("reverse alphabetic strings") {\n    for {\n      xs <- Gen.alpha.list(Range.linear(0, 100)).forAll\n    } yield xs.reverse.reverse ==== xs\n  }\n  example("reverse hello") {\n    "hello".reverse ==== "olleh"\n  }\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);