"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[621],{5680:(e,a,r)=>{r.d(a,{xA:()=>g,yg:()=>h});var t=r(6540);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function l(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?l(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function o(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=t.createContext({}),p=function(e){var a=t.useContext(i),r=a;return e&&(r="function"==typeof e?e(a):s(s({},a),e)),r},g=function(e){var a=p(e.components);return t.createElement(i.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),c=p(r),d=n,h=c["".concat(i,".").concat(d)]||c[d]||u[d]||l;return r?t.createElement(h,s(s({ref:a},g),{},{components:r})):t.createElement(h,s({ref:a},g))}));function h(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=r.length,s=new Array(l);s[0]=d;var o={};for(var i in a)hasOwnProperty.call(a,i)&&(o[i]=a[i]);o.originalType=e,o[c]="string"==typeof e?e:n,s[1]=o;for(var p=2;p<l;p++)s[p]=r[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1363:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var t=r(8168),n=(r(6540),r(5680));const l={title:"Differences to Haskell Hedgehog",sidebar_position:5,sidebar_label:"Differences to Haskell Hedgehog",slug:"/guides-haskell-differences"},s=void 0,o={unversionedId:"guides/haskell-differences",id:"guides/haskell-differences",title:"Differences to Haskell Hedgehog",description:"Differences to Haskell Hedgehog",source:"@site/../generated-docs/target/mdoc/guides/haskell-differences.md",sourceDirName:"guides",slug:"/guides-haskell-differences",permalink:"/scala-hedgehog/docs/guides-haskell-differences",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Differences to Haskell Hedgehog",sidebar_position:5,sidebar_label:"Differences to Haskell Hedgehog",slug:"/guides-haskell-differences"},sidebar:"tutorialSidebar",previous:{title:"Migration From ScalaCheck",permalink:"/scala-hedgehog/docs/guides-migration-from-scalacheck"},next:{title:"Integration with other test libraries",permalink:"/scala-hedgehog/docs/integration/"}},i={},p=[{value:"Differences to Haskell Hedgehog",id:"differences-to-haskell-hedgehog",level:2},{value:"Result",id:"result",level:2},{value:"Resource Management",id:"resource-management",level:3},{value:"Property Plus Example",id:"property-plus-example",level:3},{value:"Monadic Gen",id:"monadic-gen",level:2},{value:"State Vars",id:"state-vars",level:2}],g={toc:p},c="wrapper";function u(e){let{components:a,...r}=e;return(0,n.yg)(c,(0,t.A)({},g,r,{components:a,mdxType:"MDXLayout"}),(0,n.yg)("h2",{id:"differences-to-haskell-hedgehog"},"Differences to Haskell Hedgehog"),(0,n.yg)("p",null,"This page documents where the Scala Hedgehog API deviates significantly from the Haskell version."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#result"},"Result"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#property-plus-example"},"Property Plus Example")))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#monadic-gen"},"Monadic Gen")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#state-vars"},"State Vars"))),(0,n.yg)("h2",{id:"result"},"Result"),(0,n.yg)("p",null,"The Haskell version allow for assertions throughout the ",(0,n.yg)("inlineCode",{parentName:"p"},"Property")," monad, but the final value is\n",(0,n.yg)("a",{parentName:"p",href:"https://github.com/hedgehogqa/haskell-hedgehog/blob/694d3648f808d2401834c3e75db24b960ee8a68c/hedgehog/src/Hedgehog/Internal/Property.hs#L133"},"()"),"."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-haskell"},"prop_reverse :: Property\nprop_reverse =\n  property $ do\n    xs <- forAll $ Gen.list (Range.linear 0 100) Gen.alpha\n    reverse (reverse xs) === xs\n")),(0,n.yg)("p",null,"And the corresponding Scala version:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"def propReverse: Property =\n  for {\n    xs <- Gen.alpha.list(Range.linear(0, 100)).forAll\n  } yield xs.reverse.reverse ==== xs\n")),(0,n.yg)("h3",{id:"resource-management"},"Resource Management"),(0,n.yg)("p",null,"This approach makes it more difficult to isolate resource management in a strict language like Scala.\nIt then becomes fairly important in the Haskell version to use\n",(0,n.yg)("a",{parentName:"p",href:"https://github.com/hedgehogqa/haskell-hedgehog/blob/master/hedgehog-example/src/Test/Example/Resource.hs"},"ResourceT"),":"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-haskell"},'prop_unix_sort :: Property\nprop_unix_sort =\n  property $ do\n    values0 <- forAll $ Gen.list (Range.linear 0 100) Gen.alpha\n    test . runResourceT $ do\n      dir <- Temp.createTempDirectory Nothing "prop_dir"\n      ...\n      values0 === values\n')),(0,n.yg)("p",null,"To simplify this, and to reduce surprises, the final result in the Scala version is now a separate\n",(0,n.yg)("a",{parentName:"p",href:"https://github.com/hedgehogqa/scala-hedgehog/blob/master/core/src/main/scala/hedgehog/core/Result.scala"},"Result")," value,\nwhich forces a single, final assertion to be returned."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"def propUnixSort: Property =\n  for {\n    values0 <- Gen.alpha.list(Range.linear(0, 100)).forAll\n  } yield {\n    val dir = java.io.Files.createTempDirectory(getClass.getSimpleName).toFile\n    try {\n      values0 ==== values\n    } finally {\n      dir.delete()\n    }\n  }\n")),(0,n.yg)("h3",{id:"property-plus-example"},"Property Plus Example"),(0,n.yg)("p",null,'The Scala version has an additional data type that allows generators to be applied to the final "test" in a way that\ncan be invoked from by consumers.'),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"def propReverse: PropertyR[List[Char]] =\n  PropertyR(\n    Gen.alpha.list(Range.linear(0, 100)).forAll\n  )(xs => xs.reverse.reverse ==== xs)\n")),(0,n.yg)("p",null,'Here is an example of re-using the same method with both a property and a "golden" example test:'),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"  def tests: List[Test] =\n    List(\n      property(propReverse)\n    , example(propReverse.test(List('a', 'b', 'c')))\n    )\n")),(0,n.yg)("h2",{id:"monadic-gen"},"Monadic Gen"),(0,n.yg)("p",null,"One of the original goals of the Haskell implementation was to support completely generic monadic values."),(0,n.yg)("blockquote",null,(0,n.yg)("p",{parentName:"blockquote"},"Generators allow monadic effects.")),(0,n.yg)("p",null,"For example you could use a ",(0,n.yg)("inlineCode",{parentName:"p"},"StateT")," as part of the generator. In a strict language like Scala the Monad is also\n",(0,n.yg)("em",{parentName:"p"},"critical")," for providing a lazy tree. However, putting the laziness on ",(0,n.yg)("em",{parentName:"p"},"each")," tree node results in ",(0,n.yg)("em",{parentName:"p"},"serious")," memory\nproblems. For now we have had to move this laziness to the tree children."),(0,n.yg)("p",null,"In practice I doubt that many people are seriously using monadic effects for generated values, and I'm happy to revisit\nthis if/when an issue is raised."),(0,n.yg)("h2",{id:"state-vars"},"State Vars"),(0,n.yg)("p",null,"The Haskell State testing uses a very powerful ",(0,n.yg)("inlineCode",{parentName:"p"},"Symbolic")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"Concrete")," ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/hedgehogqa/haskell-hedgehog/blob/1c49c7aa82bc0012f0be3b213f03e84c5754d270/hedgehog/src/Hedgehog/Internal/State.hs#L93-L134"},"types")," to represent the different\nstates of a variable when implementing the ",(0,n.yg)("inlineCode",{parentName:"p"},"Command")," interface."),(0,n.yg)("p",null,"While this is ",(0,n.yg)("em",{parentName:"p"},"technically")," possible in Scala, the types are quite intimidating, especially ",(0,n.yg)("inlineCode",{parentName:"p"},"HTraversable"),'.\nInstead we opt for a lower-level variable "lookup" by passing in the ',(0,n.yg)("inlineCode",{parentName:"p"},"Environment")," map where concrete variables are\navailable, so that users can resolve them manually."))}u.isMDXComponent=!0}}]);