"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[884],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return h}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),p=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(a),h=n,m=d["".concat(i,".").concat(h)]||d[h]||u[h]||l;return a?r.createElement(m,o(o({ref:t},c),{},{components:a})):r.createElement(m,o({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var p=2;p<l;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7915:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=a(7462),n=a(3366),l=(a(7294),a(3905)),o=["components"],s={title:"Differences to Haskell Hedgehog",sidebar_label:"Differences to Haskell Hedgehog",slug:"/guides-haskell-differences"},i=void 0,p={unversionedId:"guides/haskell-differences",id:"guides/haskell-differences",title:"Differences to Haskell Hedgehog",description:"Differences to Haskell Hedgehog",source:"@site/../generated-docs/target/mdoc/guides/haskell-differences.md",sourceDirName:"guides",slug:"/guides-haskell-differences",permalink:"/scala-hedgehog/docs/guides-haskell-differences",draft:!1,tags:[],version:"current",frontMatter:{title:"Differences to Haskell Hedgehog",sidebar_label:"Differences to Haskell Hedgehog",slug:"/guides-haskell-differences"},sidebar:"docs",previous:{title:"Migration From ScalaCheck",permalink:"/scala-hedgehog/docs/guides-migration-from-scalacheck"},next:{title:"Minitest",permalink:"/scala-hedgehog/docs/integration-minitest"}},c={},u=[{value:"Differences to Haskell Hedgehog",id:"differences-to-haskell-hedgehog",level:2},{value:"Result",id:"result",level:2},{value:"Resource Management",id:"resource-management",level:3},{value:"Property Plus Example",id:"property-plus-example",level:3},{value:"Monadic Gen",id:"monadic-gen",level:2},{value:"State Vars",id:"state-vars",level:2}],d={toc:u};function h(e){var t=e.components,a=(0,n.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"differences-to-haskell-hedgehog"},"Differences to Haskell Hedgehog"),(0,l.kt)("p",null,"This page documents where the Scala Hedgehog API deviates significantly from the Haskell version."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#result"},"Result"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#property-plus-example"},"Property Plus Example")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#monadic-gen"},"Monadic Gen")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#state-vars"},"State Vars"))),(0,l.kt)("h2",{id:"result"},"Result"),(0,l.kt)("p",null,"The Haskell version allow for assertions throughout the ",(0,l.kt)("inlineCode",{parentName:"p"},"Property")," monad, but the final value is\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/hedgehogqa/haskell-hedgehog/blob/694d3648f808d2401834c3e75db24b960ee8a68c/hedgehog/src/Hedgehog/Internal/Property.hs#L133"},"()"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-haskell"},"prop_reverse :: Property\nprop_reverse =\n  property $ do\n    xs <- forAll $ Gen.list (Range.linear 0 100) Gen.alpha\n    reverse (reverse xs) === xs\n")),(0,l.kt)("p",null,"And the corresponding Scala version:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"def propReverse: Property =\n  for {\n    xs <- Gen.alpha.list(Range.linear(0, 100)).forAll\n  } yield xs.reverse.reverse ==== xs\n")),(0,l.kt)("h3",{id:"resource-management"},"Resource Management"),(0,l.kt)("p",null,"This approach makes it more difficult to isolate resource management in a strict language like Scala.\nIt then becomes fairly important in the Haskell version to use\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/hedgehogqa/haskell-hedgehog/blob/master/hedgehog-example/src/Test/Example/Resource.hs"},"ResourceT"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-haskell"},'prop_unix_sort :: Property\nprop_unix_sort =\n  property $ do\n    values0 <- forAll $ Gen.list (Range.linear 0 100) Gen.alpha\n    test . runResourceT $ do\n      dir <- Temp.createTempDirectory Nothing "prop_dir"\n      ...\n      values0 === values\n')),(0,l.kt)("p",null,"To simplify this, and to reduce surprises, the final result in the Scala version is now a separate\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/hedgehogqa/scala-hedgehog/blob/master/core/src/main/scala/hedgehog/core/Result.scala"},"Result")," value,\nwhich forces a single, final assertion to be returned."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"def propUnixSort: Property =\n  for {\n    values0 <- Gen.alpha.list(Range.linear(0, 100)).forAll\n  } yield {\n    val dir = java.io.Files.createTempDirectory(getClass.getSimpleName).toFile\n    try {\n      values0 ==== values\n    } finally {\n      dir.delete()\n    }\n  }\n")),(0,l.kt)("h3",{id:"property-plus-example"},"Property Plus Example"),(0,l.kt)("p",null,'The Scala version has an additional data type that allows generators to be applied to the final "test" in a way that\ncan be invoked from by consumers.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"def propReverse: PropertyR[List[Char]] =\n  PropertyR(\n    Gen.alpha.list(Range.linear(0, 100)).forAll\n  )(xs => xs.reverse.reverse ==== xs)\n")),(0,l.kt)("p",null,'Here is an example of re-using the same method with both a property and a "golden" example test:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"  def tests: List[Test] =\n    List(\n      property(propReverse)\n    , example(propReverse.test(List('a', 'b', 'c')))\n    )\n")),(0,l.kt)("h2",{id:"monadic-gen"},"Monadic Gen"),(0,l.kt)("p",null,"One of the original goals of the Haskell implementation was to support completely generic monadic values."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Generators allow monadic effects.")),(0,l.kt)("p",null,"For example you could use a ",(0,l.kt)("inlineCode",{parentName:"p"},"StateT")," as part of the generator. In a strict language like Scala the Monad is also\n",(0,l.kt)("em",{parentName:"p"},"critical")," for providing a lazy tree. However, putting the laziness on ",(0,l.kt)("em",{parentName:"p"},"each")," tree node results in ",(0,l.kt)("em",{parentName:"p"},"serious")," memory\nproblems. For now we have had to move this laziness to the tree children."),(0,l.kt)("p",null,"In practice I doubt that many people are seriously using monadic effects for generated values, and I'm happy to revisit\nthis if/when an issue is raised."),(0,l.kt)("h2",{id:"state-vars"},"State Vars"),(0,l.kt)("p",null,"The Haskell State testing uses a very powerful ",(0,l.kt)("inlineCode",{parentName:"p"},"Symbolic")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Concrete")," ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/hedgehogqa/haskell-hedgehog/blob/1c49c7aa82bc0012f0be3b213f03e84c5754d270/hedgehog/src/Hedgehog/Internal/State.hs#L93-L134"},"types")," to represent the different\nstates of a variable when implementing the ",(0,l.kt)("inlineCode",{parentName:"p"},"Command")," interface."),(0,l.kt)("p",null,"While this is ",(0,l.kt)("em",{parentName:"p"},"technically")," possible in Scala, the types are quite intimidating, especially ",(0,l.kt)("inlineCode",{parentName:"p"},"HTraversable"),'.\nInstead we opt for a lower-level variable "lookup" by passing in the ',(0,l.kt)("inlineCode",{parentName:"p"},"Environment")," map where concrete variables are\navailable, so that users can resolve them manually."))}h.isMDXComponent=!0}}]);