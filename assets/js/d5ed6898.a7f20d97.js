"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[797],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(n),u=i,d=g["".concat(l,".").concat(u)]||g[u]||m[u]||o;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1026:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={title:"Integration with Minitest",sidebar_position:1,sidebar_label:"Minitest",slug:"/integration-minitest"},a=void 0,s={unversionedId:"integration/minitest",id:"integration/minitest",title:"Integration with Minitest",description:"Minitest",source:"@site/../generated-docs/target/mdoc/integration/minitest.md",sourceDirName:"integration",slug:"/integration-minitest",permalink:"/scala-hedgehog/docs/integration-minitest",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Integration with Minitest",sidebar_position:1,sidebar_label:"Minitest",slug:"/integration-minitest"},sidebar:"tutorialSidebar",previous:{title:"Integration with other test libraries",permalink:"/scala-hedgehog/docs/integration/"},next:{title:"MUnit",permalink:"/scala-hedgehog/docs/integration-munit"}},l={},p=[{value:"Minitest",id:"minitest",level:2}],c={toc:p},g="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(g,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"minitest"},"Minitest"),(0,i.kt)("p",null,"Scala Hedgehog provides an integration module for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/monix/minitest"},"minitest"),". This allows you to define property-based and example-based Hedgehog tests within a minitest test suite. If you use this integration, you won't need to Scala Hedgehog sbt testing extension, because you're using the one provided by minitest:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val hedgehogVersion = "0.10.1"\nlibraryDependencies += "qa.hedgehog" %% "hedgehog-minitest" % hedgehogVersion % Test\n')),(0,i.kt)("admonition",{title:"NOTE",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If you're using sbt version ",(0,i.kt)("inlineCode",{parentName:"p"},"1.9.0")," or ",(0,i.kt)("strong",{parentName:"p"},"lower"),", you need to add the following line to your ",(0,i.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'testFrameworks += TestFramework("hedgehog.sbt.Framework")\n'))),(0,i.kt)("admonition",{title:"NOTE",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"For sbt version ",(0,i.kt)("inlineCode",{parentName:"p"},"1.9.1")," or ",(0,i.kt)("strong",{parentName:"p"},"higher"),", this step is not necessary, as ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/sbt/sbt/pull/7287"},"Hedgehog is supported by default"),".")),(0,i.kt)("p",null,"Here's an example of using ",(0,i.kt)("inlineCode",{parentName:"p"},"hedgehog-minitest"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import minitest.SimpleTestSuite\nimport hedgehog.minitest.HedgehogSupport\nimport hedgehog._\n\nobject ReverseTest extends SimpleTestSuite with HedgehogSupport {\n  property("reverse alphabetic strings") {\n    for {\n      xs <- Gen.alpha.list(Range.linear(0, 100)).forAll\n    } yield xs.reverse.reverse ==== xs\n  }\n  example("reverse hello") {\n    "hello".reverse ==== "olleh"\n  }\n}\n')))}m.isMDXComponent=!0}}]);