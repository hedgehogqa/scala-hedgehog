"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[720],{5216:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=r(4848),i=r(8453);const s={title:"Migration From ScalaCheck",sidebar_position:4,sidebar_label:"Migration From ScalaCheck",slug:"/guides-migration-from-scalacheck"},c=void 0,l={id:"guides/migration-scalacheck",title:"Migration From ScalaCheck",description:"Migration From ScalaCheck",source:"@site/../generated-docs/target/mdoc/guides/migration-scalacheck.md",sourceDirName:"guides",slug:"/guides-migration-from-scalacheck",permalink:"/scala-hedgehog/docs/guides-migration-from-scalacheck",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Migration From ScalaCheck",sidebar_position:4,sidebar_label:"Migration From ScalaCheck",slug:"/guides-migration-from-scalacheck"},sidebar:"tutorialSidebar",previous:{title:"State-Based Testing (2)",permalink:"/scala-hedgehog/docs/guides-state-tutorial-vars"},next:{title:"Differences to Haskell Hedgehog",permalink:"/scala-hedgehog/docs/guides-haskell-differences"}},t={},d=[{value:"Migration From ScalaCheck",id:"migration-from-scalacheck",level:2},{value:"Properties",id:"properties",level:2},{value:"ScalaCheck",id:"scalacheck",level:3},{value:"Hedgehog",id:"hedgehog",level:3},{value:"Gen",id:"gen",level:2},{value:"ScalaCheck",id:"scalacheck-1",level:3},{value:"Hedgehog",id:"hedgehog-1",level:3},{value:"Arbitrary",id:"arbitrary",level:2},{value:"ScalaCheck",id:"scalacheck-2",level:3},{value:"Shrink",id:"shrink",level:2},{value:"ScalaCheck",id:"scalacheck-3",level:3},{value:"Hedgehog",id:"hedgehog-2",level:3}];function o(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"migration-from-scalacheck",children:"Migration From ScalaCheck"}),"\n",(0,a.jsxs)(n.p,{children:["For many cases migrating from ScalaCheck to Hedgehog should be ",(0,a.jsx)(n.em,{children:"fairly"}),"\nstraight forward, as the general principals are quite similar, and the changes\nare largely syntactic."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#properties",children:"Properties"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#gen",children:"Gen"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#arbitrary",children:"Arbitrary"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(n.p,{children:"Some basic rules:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Replace ",(0,a.jsx)(n.code,{children:'Properties("...")'})," with just ",(0,a.jsx)(n.code,{children:"Properties"})]}),"\n",(0,a.jsxs)(n.li,{children:["Replace ",(0,a.jsx)(n.code,{children:"Prop.forAll"})," with a call to ",(0,a.jsx)(n.a,{href:"https://github.com/hedgehogqa/scala-hedgehog/search?q=%22def+forAll%22&unscoped_q=%22def+forAll%22",children:"forAll"})," on a specific ",(0,a.jsx)(n.code,{children:"Gen"})," instance","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["If you have previously been relying on ",(0,a.jsx)(n.code,{children:"Arbitrary"})," instances these ",(0,a.jsx)(n.em,{children:"have"}),"\nto be replaced with calls to functions that return an instance of ",(0,a.jsx)(n.code,{children:"Gen"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["See the ",(0,a.jsx)(n.a,{href:"https://github.com/hedgehogqa/scala-hedgehog/tree/master/core/src/main/scala/hedgehog/extra",children:"extra"})," package for some stand Scala data type combinators."]}),"\n",(0,a.jsxs)(n.p,{children:["For more information see the section on ",(0,a.jsx)(n.a,{href:"#gen",children:"Gen"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"flatMap"})," over the result of your ",(0,a.jsx)(n.code,{children:"genFoo.forAll"}),", or use a ",(0,a.jsx)(n.code,{children:"for"}),"\ncomprehension."]}),"\n",(0,a.jsxs)(n.li,{children:["Return your ",(0,a.jsx)(n.code,{children:"Prop"})," or ",(0,a.jsx)(n.code,{children:"Boolean"})," assetions with ",(0,a.jsx)(n.code,{children:"Result.assert(...)"})]}),"\n",(0,a.jsxs)(n.li,{children:["Replace ",(0,a.jsx)(n.a,{href:"https://github.com/typelevel/scalacheck/search?q=%22def+label%22&unscoped_q=%22def+label%22",children:"label"})," or ",(0,a.jsx)(n.code,{children:":|"})," with  ",(0,a.jsx)(n.a,{href:"https://github.com/hedgehogqa/scala-hedgehog/search?q=%22def+log%22&unscoped_q=%22def+log%22",children:"Result.log(...)"})]}),"\n",(0,a.jsxs)(n.li,{children:["Replace equality assertions like ",(0,a.jsx)(n.code,{children:"?="})," with ",(0,a.jsx)(n.code,{children:"===="})]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"scalacheck",children:"ScalaCheck"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import org.scalacheck._\n\nobject StringSpecification extends Properties("String") {\n\n  property("startsWith") =\n    Prop.forAll { (a: String, b: String) =>\n      (a+b).startsWith(a)\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"hedgehog",children:"Hedgehog"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import hedgehog._\nimport hedgehog.runner._\n\nobject StringSpecification extends Properties {\n\n  override def tests: List[Test] = List(\n    property("startsWith", for {\n      a <- Gen.string(Gen.unicode, Range.linear(0, 100)).forAll\n      b <- Gen.string(Gen.unicode, Range.linear(0, 100)).forAll\n      } yield Result.assert((a+b).startsWith(a))\n    )\n  )\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"gen",children:"Gen"}),"\n",(0,a.jsx)(n.p,{children:"Some basic rules:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Gen.list"})," and ",(0,a.jsx)(n.code,{children:"Gen.listOfN"})," can be replaced with a call to\n",(0,a.jsx)(n.code,{children:"list(Range.linear(0, n))"})," on a specific ",(0,a.jsx)(n.code,{children:"Gen"})," instance."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Gen.const"})," is now ",(0,a.jsx)(n.code,{children:"Gen.constant"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Arbitrary.arbitrary[Int]"})," is now ",(0,a.jsx)(n.code,{children:"Gen.int(Range.linear(min, max))"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Gen.oneOf"})," is now ",(0,a.jsx)(n.code,{children:"Gen.choice1"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:['It\'s important to note that there are no more "default" ',(0,a.jsx)(n.code,{children:"Arbitrary"})," instances\nto summon. You ",(0,a.jsx)(n.em,{children:"must"})," decided what kind of ",(0,a.jsx)(n.code,{children:"int"})," or ",(0,a.jsx)(n.code,{children:"String"})," you want to\ngenerate, and what their ",(0,a.jsx)(n.code,{children:"Range"})," is."]}),"\n",(0,a.jsx)(n.h3,{id:"scalacheck-1",children:"ScalaCheck"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val genLeaf = Gen.const(Leaf)\n\nval genNode = for {\n  v <- arbitrary[Int]\n  left <- genTree\n  right <- genTree\n} yield Node(left, right, v)\n\ndef genTree: Gen[Tree] = Gen.oneOf(genLeaf, genNode)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"hedgehog-1",children:"Hedgehog"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val genLeaf = Gen.constant(Leaf)\n\nval genNode = for {\n  v <- Gen.int(Range.linear(Integer.MaxValue, Integer.MinValue))\n  left <- genTree\n  right <- genTree\n} yield Node(left, right, v)\n\ndef genTree: Gen[Tree] = Gen.choice1(genLeaf, genNode)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"arbitrary",children:"Arbitrary"}),"\n",(0,a.jsx)(n.p,{children:"Some basic rules:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Replace ",(0,a.jsx)(n.code,{children:"implict def"})," functions that return ",(0,a.jsx)(n.code,{children:"Arbitrary"})," to a function\nthat returns the ",(0,a.jsx)(n.code,{children:"Gen"})," directly."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"scalacheck-2",children:"ScalaCheck"}),"\n",(0,a.jsxs)(n.p,{children:["This example was taken from the ",(0,a.jsx)(n.a,{href:"https://github.com/typelevel/scalacheck/blob/main/doc/UserGuide.md#the-arbitrary-generator",children:"ScalaCheck Guide"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"implicit def arbTree[T](implicit a: Arbitrary[T]): Arbitrary[Tree[T]] = Arbitrary {\n\n  val genLeaf = for(e <- Arbitrary.arbitrary[T]) yield Leaf(e)\n\n  def genInternal(sz: Int): Gen[Tree[T]] = for {\n    n <- Gen.choose(sz/3, sz/2)\n    c <- Gen.listOfN(n, sizedTree(sz/2))\n  } yield Internal(c)\n\n  def sizedTree(sz: Int) =\n    if(sz <= 0) genLeaf\n    else Gen.frequency((1, genLeaf), (3, genInternal(sz)))\n\n  Gen.sized(sz => sizedTree(sz))\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"def genTree[T](g: Gen[T]): Gen[Tree[T]] = {\n\n  val genLeaf = for(e <- g) yield Leaf(e)\n\n  def genInternal(sz: Size): Gen[Tree[T]] = for {\n    n <- Gen.choose(sz.value/3, sz.value/2)\n    c <- sizedTree(sz.value/2).list(Range.linear(0, n))\n  } yield Internal(c)\n\n  def sizedTree(sz: Size) =\n    if(sz.value <= 0) genLeaf\n    else Gen.frequency1((1, genLeaf), (3, genInternal(sz)))\n\n  Gen.sized(sz => sizedTree(sz))\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"shrink",children:"Shrink"}),"\n",(0,a.jsx)(n.p,{children:"This is assuming you're even writing them in the first place..."}),"\n",(0,a.jsx)(n.h3,{id:"scalacheck-3",children:"ScalaCheck"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"case class Data(a: String, i: Int)\n\nimplicit def arbData: Arbitrary[Data] =\n  Arbitrary[Data] {\n    for {\n      s <- arbitrary[String]\n      i <- arbitrary[Int]\n    } yield Data(a, i)\n  }\n\nimplicit def shrink: Shrink[Data] =\n  Shrink[Data] { case Data(a, i) =>\n    shrink(a).map(a2 => Data(a2, i)) append\n    shrink(i).map(i2 => Data(a, i2))\n  }\n"})}),"\n",(0,a.jsx)(n.h3,{id:"hedgehog-2",children:"Hedgehog"}),"\n",(0,a.jsx)(n.p,{children:"Good news, you don't need to do anything! Just write your generators."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"def genData: Gen[Data] =\n  for {\n    s <- Gen.string(Gen.unicode, Range.linear(0, 100))\n    i <- Gen.int(Range.linear(-100, 100))\n  } yield Data(a, i)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var a=r(6540);const i={},s=a.createContext(i);function c(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);