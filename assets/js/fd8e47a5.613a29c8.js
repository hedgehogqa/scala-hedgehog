"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[621],{7956:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>t,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=n(4848),a=n(8453);const l={title:"Differences to Haskell Hedgehog",sidebar_position:5,sidebar_label:"Differences to Haskell Hedgehog",slug:"/guides-haskell-differences"},t=void 0,i={id:"guides/haskell-differences",title:"Differences to Haskell Hedgehog",description:"Differences to Haskell Hedgehog",source:"@site/../generated-docs/target/mdoc/guides/haskell-differences.md",sourceDirName:"guides",slug:"/guides-haskell-differences",permalink:"/scala-hedgehog/docs/guides-haskell-differences",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Differences to Haskell Hedgehog",sidebar_position:5,sidebar_label:"Differences to Haskell Hedgehog",slug:"/guides-haskell-differences"},sidebar:"tutorialSidebar",previous:{title:"Migration From ScalaCheck",permalink:"/scala-hedgehog/docs/guides-migration-from-scalacheck"},next:{title:"Integration with other test libraries",permalink:"/scala-hedgehog/docs/integration/"}},o={},c=[{value:"Differences to Haskell Hedgehog",id:"differences-to-haskell-hedgehog",level:2},{value:"Result",id:"result",level:2},{value:"Resource Management",id:"resource-management",level:3},{value:"Property Plus Example",id:"property-plus-example",level:3},{value:"Monadic Gen",id:"monadic-gen",level:2},{value:"State Vars",id:"state-vars",level:2}];function h(e){const s={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"differences-to-haskell-hedgehog",children:"Differences to Haskell Hedgehog"}),"\n",(0,r.jsx)(s.p,{children:"This page documents where the Scala Hedgehog API deviates significantly from the Haskell version."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#result",children:"Result"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#property-plus-example",children:"Property Plus Example"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#monadic-gen",children:"Monadic Gen"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#state-vars",children:"State Vars"})}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"result",children:"Result"}),"\n",(0,r.jsxs)(s.p,{children:["The Haskell version allow for assertions throughout the ",(0,r.jsx)(s.code,{children:"Property"})," monad, but the final value is\n",(0,r.jsx)(s.a,{href:"https://github.com/hedgehogqa/haskell-hedgehog/blob/694d3648f808d2401834c3e75db24b960ee8a68c/hedgehog/src/Hedgehog/Internal/Property.hs#L133",children:"()"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-haskell",children:"prop_reverse :: Property\nprop_reverse =\n  property $ do\n    xs <- forAll $ Gen.list (Range.linear 0 100) Gen.alpha\n    reverse (reverse xs) === xs\n"})}),"\n",(0,r.jsx)(s.p,{children:"And the corresponding Scala version:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",children:"def propReverse: Property =\n  for {\n    xs <- Gen.alpha.list(Range.linear(0, 100)).forAll\n  } yield xs.reverse.reverse ==== xs\n"})}),"\n",(0,r.jsx)(s.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,r.jsxs)(s.p,{children:["This approach makes it more difficult to isolate resource management in a strict language like Scala.\nIt then becomes fairly important in the Haskell version to use\n",(0,r.jsx)(s.a,{href:"https://github.com/hedgehogqa/haskell-hedgehog/blob/master/hedgehog-example/src/Test/Example/Resource.hs",children:"ResourceT"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-haskell",children:'prop_unix_sort :: Property\nprop_unix_sort =\n  property $ do\n    values0 <- forAll $ Gen.list (Range.linear 0 100) Gen.alpha\n    test . runResourceT $ do\n      dir <- Temp.createTempDirectory Nothing "prop_dir"\n      ...\n      values0 === values\n'})}),"\n",(0,r.jsxs)(s.p,{children:["To simplify this, and to reduce surprises, the final result in the Scala version is now a separate\n",(0,r.jsx)(s.a,{href:"https://github.com/hedgehogqa/scala-hedgehog/blob/master/core/src/main/scala/hedgehog/core/Result.scala",children:"Result"})," value,\nwhich forces a single, final assertion to be returned."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",children:"def propUnixSort: Property =\n  for {\n    values0 <- Gen.alpha.list(Range.linear(0, 100)).forAll\n  } yield {\n    val dir = java.io.Files.createTempDirectory(getClass.getSimpleName).toFile\n    try {\n      values0 ==== values\n    } finally {\n      dir.delete()\n    }\n  }\n"})}),"\n",(0,r.jsx)(s.h3,{id:"property-plus-example",children:"Property Plus Example"}),"\n",(0,r.jsx)(s.p,{children:'The Scala version has an additional data type that allows generators to be applied to the final "test" in a way that\ncan be invoked from by consumers.'}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",children:"def propReverse: PropertyR[List[Char]] =\n  PropertyR(\n    Gen.alpha.list(Range.linear(0, 100)).forAll\n  )(xs => xs.reverse.reverse ==== xs)\n"})}),"\n",(0,r.jsx)(s.p,{children:'Here is an example of re-using the same method with both a property and a "golden" example test:'}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",children:"  def tests: List[Test] =\n    List(\n      property(propReverse)\n    , example(propReverse.test(List('a', 'b', 'c')))\n    )\n"})}),"\n",(0,r.jsx)(s.h2,{id:"monadic-gen",children:"Monadic Gen"}),"\n",(0,r.jsx)(s.p,{children:"One of the original goals of the Haskell implementation was to support completely generic monadic values."}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"Generators allow monadic effects."}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["For example you could use a ",(0,r.jsx)(s.code,{children:"StateT"})," as part of the generator. In a strict language like Scala the Monad is also\n",(0,r.jsx)(s.em,{children:"critical"})," for providing a lazy tree. However, putting the laziness on ",(0,r.jsx)(s.em,{children:"each"})," tree node results in ",(0,r.jsx)(s.em,{children:"serious"})," memory\nproblems. For now we have had to move this laziness to the tree children."]}),"\n",(0,r.jsx)(s.p,{children:"In practice I doubt that many people are seriously using monadic effects for generated values, and I'm happy to revisit\nthis if/when an issue is raised."}),"\n",(0,r.jsx)(s.h2,{id:"state-vars",children:"State Vars"}),"\n",(0,r.jsxs)(s.p,{children:["The Haskell State testing uses a very powerful ",(0,r.jsx)(s.code,{children:"Symbolic"})," and ",(0,r.jsx)(s.code,{children:"Concrete"})," ",(0,r.jsx)(s.a,{href:"https://github.com/hedgehogqa/haskell-hedgehog/blob/1c49c7aa82bc0012f0be3b213f03e84c5754d270/hedgehog/src/Hedgehog/Internal/State.hs#L93-L134",children:"types"})," to represent the different\nstates of a variable when implementing the ",(0,r.jsx)(s.code,{children:"Command"})," interface."]}),"\n",(0,r.jsxs)(s.p,{children:["While this is ",(0,r.jsx)(s.em,{children:"technically"})," possible in Scala, the types are quite intimidating, especially ",(0,r.jsx)(s.code,{children:"HTraversable"}),'.\nInstead we opt for a lower-level variable "lookup" by passing in the ',(0,r.jsx)(s.code,{children:"Environment"})," map where concrete variables are\navailable, so that users can resolve them manually."]})]})}function d(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>i});var r=n(6540);const a={},l=r.createContext(a);function t(e){const s=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(l.Provider,{value:s},e.children)}}}]);