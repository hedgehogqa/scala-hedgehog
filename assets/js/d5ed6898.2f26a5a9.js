"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[797],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=c(n),m=i,d=g["".concat(l,".").concat(m)]||g[m]||p[m]||o;return n?r.createElement(d,a(a({ref:t},u),{},{components:n})):r.createElement(d,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1026:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],s={title:"Integration with Minitest",sidebar_position:1,sidebar_label:"Minitest",slug:"/integration-minitest"},l=void 0,c={unversionedId:"integration/minitest",id:"integration/minitest",title:"Integration with Minitest",description:"Minitest",source:"@site/../generated-docs/target/mdoc/integration/minitest.md",sourceDirName:"integration",slug:"/integration-minitest",permalink:"/scala-hedgehog/docs/integration-minitest",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Integration with Minitest",sidebar_position:1,sidebar_label:"Minitest",slug:"/integration-minitest"},sidebar:"tutorialSidebar",previous:{title:"Integration with other test libraries",permalink:"/scala-hedgehog/docs/integration/"},next:{title:"MUnit",permalink:"/scala-hedgehog/docs/integration-munit"}},u={},p=[{value:"Minitest",id:"minitest",level:2}],g={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"minitest"},"Minitest"),(0,o.kt)("p",null,"Scala Hedgehog provides an integration module for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/monix/minitest"},"minitest"),". This allows you to define property-based and example-based Hedgehog tests within a minitest test suite. If you use this integration, you won't need to Scala Hedgehog sbt testing extension, because you're using the one provided by minitest:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val hedgehogVersion = "0.9.0"\nlibraryDependencies ++= "qa.hedgehog" %% "hedgehog-minitest" % hedgehogVersion\n\ntestFrameworks += TestFramework("minitest.runner.Framework")\n')),(0,o.kt)("p",null,"Here's an example of using ",(0,o.kt)("inlineCode",{parentName:"p"},"hedgehog-minitest"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import minitest.SimpleTestSuite\nimport hedgehog.minitest.HedgehogSupport\nimport hedgehog._\n\nobject ReverseTest extends SimpleTestSuite with HedgehogSupport {\n  property("reverse alphabetic strings") {\n    for {\n      xs <- Gen.alpha.list(Range.linear(0, 100)).forAll\n    } yield xs.reverse.reverse ==== xs\n  }\n  example("reverse hello") {\n    "hello".reverse ==== "olleh"\n  }\n}\n')))}m.isMDXComponent=!0}}]);